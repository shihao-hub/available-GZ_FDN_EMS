"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)6)w8qr$j#akf1a^e#2z-h)6$-9o)lf8vw3ijdsvm%5rv#_x)@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "debug_toolbar",  # todo: debug 需要配置的不止这一个地方

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 【知识点】【第三方库】DRF 首当其先需要配置这个，然后执行 makemigrations 和 migrate
    "rest_framework",
    # 【知识点】【第三方库】drf_spectacular，drf 的 swagger 文档
    "drf_spectacular",
    "drf_spectacular_sidecar",

    "apps.core",
    "apps.authentication",
    "apps.pdn",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 【知识点】【第三方库】django 的国际化
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 【知识点】django 默认会去 app 下的 templates 目录下寻找模板文件，其他目录需要手动配置
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 语言设置为简体中文

TIME_ZONE = 'Asia/Shanghai'  # 时区设置为中国标准时间（东八区）

USE_I18N = True

USE_TZ = False  # 关闭时区支持（适用场景：如果你的用户和服务器都在中国，且不需要处理跨国时区问题。）

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# 【知识点】STATIC_URL 推荐 /static/，带个前缀。django-admin 默认生成的不带这个前缀
STATIC_URL = '/static/'

# 【知识点】django `BASE_DIR / "static" /` 不是默认的，需要手动配置

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------------------------------------------------------------------------------------- #
# DRF 配置字典
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    # 返回 response 对象所用的类 -> DRF 会根据请求的 Accept 头来选择一个最合适的渲染器
    'DEFAULT_RENDER_CLASSES': [
        'rest_framework.renders.JSONRenderer',
        'rest_framework.renders.BrowsableAPIRenderer',  # DRF 一般都是 restful 风格的接口，一般这个都是开发阶段才启用的
    ],
    # 解析器，如何解析 request 请求中的 request.data
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    # 权限相关配置
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # 仅限已经通过身份验证的用户访问
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # 未经身份验证的请求将获得只读读的权限
    ],
    'UNAUTHENTICATED_USER': None,  # 未认证时不设置匿名用户
    # 认证相关配置 [reference link](https://pythondjango.cn/django/rest-framework/5-permissions/)
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',

        # 【知识点】【DRF 的用户登录页面】必填项
        'rest_framework.authentication.SessionAuthentication',

        # 'rest_framework.authentication.TokenAuthentication',
    ],
    # "URL_FIELD_NAME": 'link', # todo: [to be understood] URL_FIELD_NAME

    # 【知识点】drf_spectacular 接口文档生成，必填项
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# ======= drf_spectacular ====== #
SPECTACULAR_SETTINGS = {
    'TITLE': '贵州山区柔性配电网络多维度评估系统 - 接口文档',
    'DESCRIPTION': '',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # 【知识点】drf_spectacular 配置静态资源为 drf_spectacular_sidecar，而不是从 cnd 取
    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',

    # todo: 接口文档也得设置成有权限才能使用吧？类似 drf 的文档。以下设置无效的（主要还得是 fastapi 呢）
    "DEFAULT_PERMISSION_CLASSES": REST_FRAMEWORK["DEFAULT_PERMISSION_CLASSES"],
}
